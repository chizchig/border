pipeline {
    agent any

    environment {
        TF_VERSION = "0.15.0"
        AWS_DEFAULT_REGION = "us-east-1"
        INSTANCE_ID = ""
    }

    triggers {
        pollSCM('*/5 * * * *') // Polls the SCM (source control management) every 5 minutes
    }

    stages {
        stage('Build Infrastructure') {
            steps {
                script {
                    // Download and install Terraform
                    sh '''
                        curl -o terraform.zip -L https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
                        unzip -o terraform.zip
                        chmod +x terraform
                    '''
                    // Initialize and apply Terraform configuration
                    sh './terraform init'
                    sh './terraform validate'
                    sh './terraform plan -out=tfplan'
                    sh './terraform apply -auto-approve tfplan'

                    // Retrieve the instance ID from Terraform output
                    def instanceId = sh(script: 'terraform output --output text instance_id', returnStdout: true).trim()

                    // Start the instance
                    sh 'aws ec2 start-instances --instance-ids ${instanceId}'
                    env.INSTANCE_ID = instanceId // Set it as an environment variable for later use
                }
            }
        }
        stage('Process Webhook') {
            steps {
                script {
                    // Make an HTTP POST request to the webhook URL with a JSON payload
                    def webhookUrl = 'http://34.226.217.76:8080/'
                    def payload = '{"command": "start"}'

                    // Execute curl command to make the HTTP request
                    sh "curl -X POST -H 'Content-Type: application/json' -d '${payload}' ${webhookUrl}"
                }
            }
        }
        stage('Control Instance') {
            steps {
                script {
                    def instanceId = env.INSTANCE_ID
                    def action = input(
                        message: 'Select an action for the EC2 instance',
                        ok: 'Execute',
                        parameters: [
                            choice(choices: ['stop', 'terminate'], description: 'Action', name: 'ACTION')
                        ]
                    )

                    if (action == 'stop') {
                        sh 'aws ec2 stop-instances --instance-ids ${instanceId}'
                    } else if (action == 'terminate') {
                        sh 'aws ec2 terminate-instances --instance-ids ${instanceId}'
                    }
                }
            }
        }
    }
}