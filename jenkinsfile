pipeline {
    agent any

    environment {
        TF_VERSION = "0.15.0"
        AWS_DEFAULT_REGION = "us-east-1"
        INSTANCE_ID = "aws_instance.database_instance.id"
    }

    triggers {
        pollSCM('*/5 * * * *') // Polls the SCM (source control management) every 5 minutes
    }

    stages {
        stage('Build Infrastructure') {
            steps {
                script {
                    // Download and install Terraform
                    sh '''
                        curl -o terraform.zip -L https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
                        unzip -o terraform.zip
                        chmod +x terraform
                    '''
                    // Initialize and apply Terraform configuration
                    sh './terraform init'
                    sh './terraform validate'
                    sh './terraform plan -out=tfplan'
                    sh './terraform apply -auto-approve tfplan'

                    // Retrieve the instance ID from Terraform output
                    def instanceId = sh(script: './terraform output -raw instance_id', returnStdout: true).trim()
                    env.INSTANCE_ID = instanceId // Set it as an environment variable for later use
                }
            }
        }
        stage('Process Webhook') {
            steps {
                script {
                    def requestBody = httpRequest requestBody: true
                    def command = requestBody.command
                    def instanceId = env.INSTANCE_ID // Retrieve instance ID from environment
                    
                    if (command == 'start') {
                        sh "aws ec2 start-instances --instance-ids ${instanceId}"
                    } else if (command == 'stop') {
                        sh "aws ec2 stop-instances --instance-ids ${instanceId}"
                    } else if (command == 'terminate') {
                        sh "aws ec2 terminate-instances --instance-ids ${instanceId}"
                    } else {
                        error "Invalid command: ${command}"
                    }
                }
            }
        }
    }
}
